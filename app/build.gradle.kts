/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    kotlin("jvm") version "1.9.22"
    application
}

val lwjglVersion = "3.3.5"

// OSに応じてネイティブライブラリを選択
val lwjglNatives = Pair(
    System.getProperty("os.name")!!,
    System.getProperty("os.arch")!!
).let { (name, arch) ->
    when {
        arrayOf("Mac OS X", "Darwin").any { name.startsWith(it) } ->
            if (arch.startsWith("aarch64")) "natives-macos-arm64"
            else "natives-macos"
        arrayOf("Windows").any { name.startsWith(it) } ->
            if (arch.endsWith("64")) "natives-windows"
            else "natives-windows"
        arrayOf("Linux").any { name.startsWith(it) } ->
            if (arch.endsWith("64")) "natives-linux"
            else "natives-linux"
        else -> throw Error("Unsupported OS: $name")
    }
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal() // ローカルリポジトリを追加
}

dependencies {
    // JUnit Jupiterをテスト用に使用
    testImplementation("org.junit.jupiter:junit-jupiter:5.8.1")

    // JUnitプラットフォームランチャーをテストランタイム用に使用
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.1-jre")

    implementation(platform("org.lwjgl:lwjgl-bom:$lwjglVersion"))

    implementation("org.lwjgl:lwjgl")
    implementation("org.lwjgl:lwjgl-assimp")
    implementation("org.lwjgl:lwjgl-glfw")
    implementation("org.lwjgl:lwjgl-openal")
    implementation("org.lwjgl:lwjgl-opengl")
    implementation("org.lwjgl:lwjgl-stb")

    // Add JOML dependency
    implementation("org.joml:joml:1.10.5")

    // ネイティブライブラリの依存関係
    listOf(
        "lwjgl",
        "lwjgl-assimp",
        "lwjgl-glfw",
        "lwjgl-openal",
        "lwjgl-opengl",
        "lwjgl-stb"
    ).forEach { lib ->
        runtimeOnly("org.lwjgl:$lib:$lwjglVersion:${lwjglNatives}")
    }

    testImplementation("org.assertj:assertj-core:3.24.2")

    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(21))
    }
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

application {
    // Define the main class for the application.
    mainClass.set("jp.ac.uryukyu.ie.e245719.Main")
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8" // エンコーディングをUTF-8に設定
}

tasks.test {
    if (System.getProperty("os.name").lowercase().contains("mac")) {
        jvmArgs = listOf("-XstartOnFirstThread")
    }
        
    // JUnitプラットフォームを使用
    useJUnitPlatform()
}

tasks.register<JavaExec>("jpackage") {
    group = "build"
    mainClass.set("jp.ac.uryukyu.ie.e245719.Main")
    classpath = sourceSets["main"].runtimeClasspath
    jvmArgs = listOf("-XstartOnFirstThread")
}

tasks.jar {
    manifest {
        attributes(
            "Main-Class" to "jp.ac.uryukyu.ie.e245719.Main" // メインクラスを指定
        )
    }
}
